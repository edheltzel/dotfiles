[user]
  name  = Ed Heltzel
  email = ed@rainyday.media

[github]
  user = edheltzel

[credential]
  helper = osxkeychain

[color]
  ui     = auto
  branch = auto
  diff   = auto
  status = auto

[color "branch"]
  current = yellow reverse
  local   = yellow
  remote  = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old  = red bold
  new  = green bold

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan

[core]
  excludesfile = ~/.gitignore_global
  editor       = code-insiders --wait
  # editor       = code -w
  #editor       = nvim
  mergeoptions = --no-ff --no-commit
  autocrlf     = input
  quotepath    = false
  safecrlf     = warn
  pager        = delta

[delta]
  features = side-by-side line-numbers decorations
  syntax-theme = TwoDark
  plus-style = syntax "#003800"
  minus-style = syntax "#3f0001"

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none
  hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
  line-numbers-left-style = cyan
  line-numbers-right-style = cyan
  line-numbers-minus-style = 124
  line-numbers-plus-style = 28

[diff]
  tool = vscode

[difftool "vscode"]
  cmd = code-insiders --wait --diff $LOCAL $REMOTE

[merge]
  tool = vscode
  log  = true

[mergetool "vscode"]
  cmd = code-insiders --wait $MERGED

[apply]
  #Detect whitespace errors when applying a patch
  whitespace = fix

[alias]
  #used the most by me
  aa  = add --all
  cm  = commit -S -m
  cma = !git add --all && git commit -S -m
  co  = checkout
  rv  = remote -v

  #checkouts
  cb      = checkout -b
  cob     = checkout -b
  ct      = checkout -t
  cr      = checkout --
  unstage = reset HEAD

  #submodules
  sm = "!f() { git submodule update --init --recursive $1; }; f"

  #branch management
  b  = branch
  ba = branch -a
  bd = branch -d
  bD = branch -D
  bm = branch -m
  d  = diff
  dt = difftool
  m  = merge
  mt = mergetool
  r  = rebase
  rr = remote rm

  #rebases & squash
  rb  = rebase
  rbi = rebase -i
  rbc = rebase --continue
  rba = rebase --abort
  rbs = rebase --skip
  rf  = reflog

  unstage  = reset HEAD --
  uncommit = reset --soft HEAD~1
  undo = reset --soft HEAD~1
  delete = reset --hard HEAD~1
  trash = reset --hard HEAD~1
  #squashes
  sq = "!f() { git rebase -i HEAD~$1; }; f"

  #tags
  t      = tag -l
  squash = "!f() { git rebase -i HEAD~$1; }; f"

  #stashes
  st   = stash
  stl  = stash list
  stp  = stash pop
  sts  = "!f() { git stash show stash@{$1}; }; f"
  std  = "!f() { git stash show stash@{$1} -U5; }; f"
  strm = "!f() { git stash drop stash@{$1} -U5; }; f"

  #commits
  c = commit

  #pushes & pulls
  f   = fetch --prune
  p   = push
  ps  = push
  pl  = pull
  pur = pull --rebase
  pr  = pull-request
  psf = push --force
  upm = !git fetch upstream && git merge upstream/master

  #status & log
  s  = status -sb
  ss = status
  v  = log --oneline --decorate --all --graph --simplify-by-decoration
  va = log --oneline --decorate --all --graph
  logs = log --color --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  #show tracked branches
  tracked = "!d() { git for-each-ref --format='%(refname:short)' refs/heads/ | while read b; do if r=$(git config --get branch.$b.remote); then m=$(git config --get branch.$b.merge); echo \"$b -> $r/${m##*/}\"; fi; done } ; d"

  #`git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  #show changes
  wc  = whatchanged -p --abbrev-commit --pretty = medium
  r   = reset
  rhh = reset HEAD --hard

  last = log -1 HEAD
  latest = show --name-only --oneline HEAD
  down = pull --rebase origin master
  up = push -u origin master
  save = "!git add -A; git commit ."
  uptags = push --follow-tags
  downtags = fetch --tags

[push]
  default    = matching
  followTags = true

[filter "media"]
  required = true
  clean    = git media clean %f
  smudge   = git media smudge %f

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[help]

[gui]
  fontui     = -family \"Fira Code\" -size 13 -weight normal -slant roman -underline 0 -overstrike 0
  fontdiff = -family \"Fira Mono for Powerline\" -size 11 -weight normal -slant roman -underline 0 -overstrike 0
  commitmsgwidth   = 80
  pruneduringfetch = true
  tabsize          = 2

[pull]
  rebase = false

[init]
  defaultBranch = master

# This next lines include Netlify's Git Credential Helper configuration in your Git configuration.
[include]
  path = /Users/ed/Library/Preferences/netlify/helper/git-config
